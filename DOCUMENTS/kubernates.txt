==========================================================================================
CREATE A SPRINGBOOT APP AND DOCKERISED IT AND PUSH IMAG TO DOCKER HUB 
==========================================================================================

#Create a Spring Boot Application 
dockerized it and push to the dockerhub 

Dockerfile
------------------------------------------------------------------------------------------
FROM openjdk:8
MAINTAINER adarshkumarsingh83@gmail.com
ADD target/springboot-docker-xxx.jar springboot-docker-xxx.jar
ENV PORT 8080
EXPOSE 8080
ENTRYPOINT ["java","-jar","springboot-docker-xxx.jar"]
------------------------------------------------------------------------------------------
#to create a docker image 
$ docker build -f Dockerfile -t adarshkumarsingh83/springboot-docker-xxx .

#To view the docker iamge 
$ docker images

#to execute the docker image 
$ docker run -p 8080:8080 adarshkumarsingh83/springboot-xxx:latest

#to test the image 
$ curl localhost:8080/api/message

#to push to docker repository 
$ docker push adarshkumarsingh83/springboot-docker-xxx

==========================================================================================
CREATE A KUBERNATES DEPLOYMENT AND SERVICES AND DEOPLOYE THE SERVICE AND TESTING 
==========================================================================================

# To view the cluster info 
$ kubectl cluster-info

#to get the service info 
$ kubectl get all


# Deploy the Application to Kubernetes

#To create a sample deployment file 
$ kubectl create deployment <deployment-name> --image=<repository-name/image-name> --dry-run -o=yaml > deployment.yaml
$ kubectl create deployment springboot-docker-xxx --image=adarshkumarsingh83/springboot-docker-xxx --dry-run -o=yaml > deployment.yaml

#to add sepreator in the file 
$ echo --- >> deployment.yaml

#To create a service cluster
$ kubectl create service clusterip <service-name> --tcp=8080:8080 --dry-run -o=yaml >> deployment.yaml
$ kubectl create service clusterip springboot-docker-xxx --tcp=8080:8080 --dry-run -o=yaml >> deployment.yaml


# apply the service 
$ kubectl apply -f deployment.yaml
 logs
 deployment.apps/springboot-docker-xxx created
 service/springboot-docker-xxx created
 
#To get the deployment  
$ kubectl get deployment

# to get the pods shows its status as "Running".
$ kubectl get all


$ kubectl port-forward svc/springboot-docker-xxx 8080:8080

# to hit endpoint 
$ curl localhost:8080/api/message